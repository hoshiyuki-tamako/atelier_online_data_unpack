doctype html
html
  head
    title #{that.i18nService.i18n.__("区域")}
    link(rel="stylesheet" href= that.exportService.rootFolderRelativePath + "css/main.css")

    //- scroll top button for mobile
    script(src="https://code.jquery.com/jquery-3.5.1.min.js" integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=" crossorigin="anonymous")
    script(src="https://cdnjs.cloudflare.com/ajax/libs/material-scrolltop/1.0.2/material-scrolltop.min.js" integrity="sha512-U5XMCa20kp0+xaI+DDNcEjTrwecJ5jkWGUB9Ye4cRkGWgfQ03dnXu+eFr7BtjyjPSBCBngip9MlTgHjuSrxXAA==" crossorigin="anonymous")
    link(rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/material-scrolltop/1.0.2/material-scrolltop.min.css" integrity="sha512-V5Tr6yGfJc51zNqUUn+CydMuxKdQBf52F6EX89kityPpmSBduIBl39xsmcoKcmlLds+O8l+qN6FtgSjBSIMspA==" crossorigin="anonymous")
    script(src="https://cdnjs.cloudflare.com/ajax/libs/mobile-detect/1.4.4/mobile-detect.min.js" integrity="sha512-hSVyGuXBHmZy+A+P21DRUAuc7UTfcqc0geieb/H1ZmqiJAoDTfzFYIOBAMTcFUWU/PwLPEoREYG/77ckPB6oSw==" crossorigin="anonymous")
    script(src= that.exportService.rootFolderRelativePath + "js/scrollTopButton.js")

    style.
      .area-indexes-container {
        display: flex;
        flex-wrap: wrap;
      }
      .area-index-container {
        padding: 12px;
      }


      .area-container {
        display: flex;
        padding: 12px;
      }
      .area-container-left {
        min-width: 300px;
        max-width: 300px;
      }
      .area-container-right {
        padding: 12px;
      }

      .area-items-container img, .area-enemies-container img {
        width: 60px;
      }
      .area-towns-container img {
        width: 240px;
      }
  style.
  body
    h2 #{that.i18nService.i18n.__("区域")}
    div.area-indexes-container
      - for (const _areaDetail of areaDetail.List)
        - const _areaInfo = areaInfo.List.find(p => p.iAreaId === _areaDetail.iAreaID) 
        div.area-index-container
          a(href="#iAreaID-" + _areaDetail.iAreaID)
            - const _fieldName = fieldName.List.find(p => p.iAreaNameId === _areaInfo.iAreaNameId);
            span #{_fieldName.strAreaName} #{_fieldName.strAreaNameSub.trim() ? `/ ${_fieldName.strAreaNameSub}` : ''}
    br
    br
    br
    br
    hr

    div
      - for (const _areaDetail of areaDetail.List)
        - const _areaInfo = areaInfo.List.find(p => p.iAreaId === _areaDetail.iAreaID)
        div.area-container(id="iAreaID-" + _areaDetail.iAreaID)
          div.area-container-left
            - const _fieldName = fieldName.List.find(p => p.iAreaNameId === _areaInfo.iAreaNameId);
            - if (_fieldName)
              h3 #{_fieldName.strAreaName} #{_fieldName.strAreaNameSub.trim() ? `/ ${_fieldName.strAreaNameSub}` : ''}
            - if (areaImages.includes(`${_areaDetail.iAreaID}.png`))
              a(href= modelUrlMap[_areaDetail.iAreaID] target="_blank")
                img(src=`img/map/${_areaDetail.iAreaID}.png` alt= _areaDetail.iAreaID style="width: 80%")
            p iAreaID: #{_areaDetail.iAreaID}
            p LV: #{_areaDetail.iLevel}

          div.area-container-right
            - if (_areaDetail.iItemIDList.length)
              h4 ---- #{that.i18nService.i18n.__("アイテム")} ----
              div.area-items-container
                - for (const id of _areaDetail.iItemIDList)
                  - const _item = item.m_vList.find(i => i.DF === id)
                    a(href="item.html#DF-" + id target="_blank")
                      img(src= that.exportService.rootFolderRelativePath + "img/icon_s/Texture2D/icon_item_s_" + id + ".png" alt= _item.NAME)
            - if (_areaDetail.iEnemyIDList.length)
              h4 ---- #{that.i18nService.i18n.__("敵")} ----
              div.area-enemies-container
                - for (const id of _areaDetail.iEnemyIDList)
                  - const _enemy = enemy.m_vList.find(i => i.DF === id)
                    a(href="enemy.html#DF-" + _enemy.DF target="_blank")
                      img(src= that.exportService.rootFolderRelativePath + "img/enemy/Texture2D/" + `enemy_tex_${_enemy.sParam.MDL}.png` alt= _enemy.strName)

            - const filteredNormalSpawnerData = Object.keys(spawnerData).filter(p => !p.includes('Dun') && p.includes(`SpawnList_${_areaDetail.iAreaID.toString().padStart(2, '0')}_`)).map(p => spawnerData[p]).flat().filter(p => p.spawnerKind === 3);
            - if (filteredNormalSpawnerData.length)
              h4 ---- #{that.i18nService.i18n.__("他の敵")} ----
              div.area-enemies-container
                - for (const spawn of filteredNormalSpawnerData)
                  - const _enemy = enemy.m_vList.find(i => i.DF === spawn.DF)
                  - if (_enemy)
                    a(href="enemy.html#DF-" + _enemy.DF target="_blank")
                      img(src= that.exportService.rootFolderRelativePath + "img/enemy/Texture2D/" + `enemy_tex_${_enemy.sParam.MDL}.png` alt= _enemy.strName)

            - const dungeonInfos = dungeonInfo.List.filter(p => p.iAreaId === _areaDetail.iAreaID)
            - if (dungeonInfos.length)
              h4 ---- #{that.i18nService.i18n.__("ダンジョン")} ----
              div.area-dungeons-container
                - for (const [i, _dungeonInfo] of dungeonInfos.entries())
                  span(id="iDungeonId-" + _dungeonInfo.iDungeonId)
                  - const _fieldName = fieldName.List.find(p => p.iAreaNameId === _dungeonInfo.iAreaNameId);
                  - if (_fieldName)
                    p #{_fieldName.strAreaName} #{_fieldName.strAreaNameSub.trim() ? `/ ${_fieldName.strAreaNameSub}` : ''}
                  - else
                    p -
                  p #{that.i18nService.i18n.__("最大階層")}: #{_dungeonInfo.iMaxFloor}
                  - const returnAreaInfo = areaInfo.List.find(p => p.iAreaId === _dungeonInfo.iReturnArea) 
                  - const returnFieldName = fieldName.List.find(p => p.iAreaNameId === returnAreaInfo.iAreaNameId);
                  p #{that.i18nService.i18n.__("脱出区域")}: 
                    a(href="#iAreaID-" + _dungeonInfo.iReturnArea) #{returnFieldName ? returnFieldName.strAreaName : '-'}
                  - if (dungeonInfos.length !== (i + 1))
                    p &#x3E;
              
              - const dungeonSpawnerData = Object.keys(spawnerData).filter(p => p.includes('Dun') && p.includes(`SpawnList_${_areaDetail.iAreaID}`)).map(p => spawnerData[p]).flat().filter(p => p.spawnerKind === 3);
              -  if (dungeonSpawnerData.length)
                h4 ---- #{that.i18nService.i18n.__("敵")} ----
                div.area-enemies-container
                  - for (const spawn of dungeonSpawnerData)
                    - const _enemy = enemy.m_vList.find(i => i.DF === spawn.DF)
                    - if (_enemy)
                      a(href="enemy.html#DF-" + _enemy.DF target="_blank")
                        img(src= that.exportService.rootFolderRelativePath + "img/enemy/Texture2D/" + `enemy_tex_${_enemy.sParam.MDL}.png` alt= _enemy.strName)

            - const townInfos = townInfo.List.filter(p => p.iAreaId === _areaDetail.iAreaID)
            - if (townInfos.length)
              h4 ---- #{that.i18nService.i18n.__("町")} ----
              div.area-towns-container
                - for (const _townInfo of townInfos)
                  - const _fieldName = fieldName.List.find(p => p.iAreaNameId === _townInfo.iAreaNameId);
                  - if (_fieldName)
                    p #{_fieldName.strAreaName} #{_fieldName.strAreaNameSub.trim() ? `/ ${_fieldName.strAreaNameSub}` : ''}
                    p
                      - for (const townIcon of townIcons.filter(p => p.startsWith(`Map_Town_${_townInfo.iTownId.toString().padStart(2, "0")}`)))
                        img(src= that.exportService.rootFolderRelativePath + "img/map_town/Texture2D/" + townIcon alt='')

            - const gateInfos = gateInfo.List.filter(p => p.iArea === _areaDetail.iAreaID)
            - if (gateInfos.length)
              h4 ---- #{that.i18nService.i18n.__("ゲート")} ----
              div.area-gates-container
                - for (const _gateInfo of gateInfos)
                  p= _gateInfo.strName
        hr