doctype html
html
  head
    title Chara
    style.
      *{padding:0;margin:0}

      table th {
        text-align: right;
      }

      table td {
        text-align: left;
      }
      table th, td {
        padding: 4px;
      }

      .categories-index-container {
        display: flex;
        flex-wrap: wrap;
      }
      .category-index-container {
        border: 1px gray solid;
        padding: 4px;
      }


      .items-index-container {
        display: flex;
        flex-wrap: wrap;
      }
      .item-index-container {
        border: 1px gray solid;
        width: 120px;
        min-height: 140px;
        display: flex;
        flex-direction: column;
        padding-left: 4px;
      }
      .item-index-text {
        white-space: nowrap;
        text-overflow: ellipsis;
        overflow: hidden;
      }
      .item-index-img {
        width: 100%;
      }

      .items {
        display: flex;
        flex-wrap: wrap;
        flex-direction: column;
      }
      .item-container {
        border: 1px gray solid;
        margin: 10px;
        width: calc(100%-(10px * 2));
        display: flex;
        flex-direction: row;
      }
      .item-container-left {
        min-width: 200px;
        max-width: 200px;
        border-right: 1px gray solid;
      }
      .item-container-right {
        padding-left: 4px;
      }
      .item-making-container {
        display: flex;
        flex-wrap: wrap;
        flex-direction: row;
      }
      .item-name {
        text-align: center;
      }
      .item-icon-container {
        justify-content: center;
        align-items: center;
      }
      .item-icon-img {
        width: 100%;
      }
  body
    div.items-index-container
      - for (const _chara of chara.m_vList.filter(p => p.SKILL.length))
        a(href="#DF-" + _chara.DF)
          div.item-index-container
            p.item-index-text #{_chara.NAME}
            div
              img.item-index-img(src="./img/chara/Texture2D/icon_chara_all_" + _chara.DF.toString().padStart(4, "0") + "_00.png" alt= _chara.NAME)
    hr
    div.items
      - for(const _chara of chara.m_vList.filter(p => p.SKILL.length))
        div(id="DF-" + _chara.DF).item-container
          div.item-container-left
            div
              h3.item-name= _chara.NAME
              div.item-icon
              - for (const id of [...Array(10).keys()])
                - const iconFilename = `icon_chara_all_${_chara.DF.toString().padStart(4, "0")}_${id.toString().padStart(2, "0")}.png`
                - if (charaIcons.includes(iconFilename))
                  img.item-index-img(src="./img/chara/Texture2D/" + `icon_chara_all_${_chara.DF.toString().padStart(4, "0")}_${id.toString().padStart(2, "0")}.png` alt= _chara.NAME)
            div
              div= _chara.DESC
          div.item-container-right
            p DF: #{_chara.DF}
            div
              h4 ------ Skill ------
              - for (const [lv, skills] of Enumerable.from(chara.m_vList[0].SKILL).groupBy(p => p.LV).orderBy(p => p.key()).select(p => [p.key(), p.toArray()]).toArray())
                h4 ----- LV #{lv} -----
                - for (const _s of skills)
                  - const s = skill.m_vList.find(s => s.id === _s.DF)
                  - if (!s)
                    p skill not found: DF=#{_s.DF}
                  - else
                    table
                      tr
                        th 名前:
                        td= s.name
                      tr
                        th 詳細:
                        td= s.detail
                      tr
                        th 数値:
                        td= `${s.effectValue}, ${s.effectValue2}`
                    p &#x3E;

              - for (const lv of [1, 60, 80])
                h4 ----- LV #{lv} -----
                  table
                    tr
                      th HP
                      td= LogicHelper.calculateState(_chara.SPEC.HP, lv)
                    tr
                      th 物理攻撃 SATK:
                      td= LogicHelper.calculateState(_chara.SPEC.SATK, lv)
                    tr
                      th 物理防禦 SDEF:
                      td= LogicHelper.calculateState(_chara.SPEC.SDEF, lv)
                    tr
                      th 魔法攻撃 MATK:
                      td= LogicHelper.calculateState(_chara.SPEC.MATK, lv)
                    tr
                      th 魔法防禦 MDEF:
                      td= LogicHelper.calculateState(_chara.SPEC.MDEF, lv)
                    tr
                      th 速度 SPD:
                      td= LogicHelper.calculateState(_chara.SPEC.SPD, lv)
                    tr
                      th SDA:
                      td= LogicHelper.calculateState(_chara.SPEC.SDA, lv)
                    tr
                      th LDA:
                      td= LogicHelper.calculateState(_chara.SPEC.LDA, lv)
                    tr
                      th QTH:
                      td= LogicHelper.calculateState(_chara.SPEC.QTH, lv)
                    tr
                      th DDG:
                      td= LogicHelper.calculateState(_chara.SPEC.DDG, lv)
                    tr
                      th SADD:
                      td= LogicHelper.calculateState(_chara.SPEC.SADD, lv)

              - const lv = 80
              - const maxDfm = _chara.FDM[_chara.FDM.length - 1];
              h4 ----- LV #{lv} 完食 -----
                table
                  tr
                    th HP
                    td= LogicHelper.calculateState(_chara.SPEC.HP, lv) + maxDfm.HP
                  tr
                    th 物理攻撃 SATK:
                    td= LogicHelper.calculateState(_chara.SPEC.SATK, lv) + maxDfm.SATK
                  tr
                    th 物理防禦 SDEF:
                    td= LogicHelper.calculateState(_chara.SPEC.SDEF, lv) + maxDfm.SDEF
                  tr
                    th 魔法攻撃 MATK:
                    td= LogicHelper.calculateState(_chara.SPEC.MATK, lv) + maxDfm.MATK
                  tr
                    th 魔法防禦 MDEF:
                    td= LogicHelper.calculateState(_chara.SPEC.MDEF, lv) + maxDfm.MDEF
                  tr
                    th 速度 SPD:
                    td= LogicHelper.calculateState(_chara.SPEC.SPD, lv) + maxDfm.SPD
                  tr
                    th SDA:
                    td= LogicHelper.calculateState(_chara.SPEC.SDA, lv) + maxDfm.SDA
                  tr
                    th LDA:
                    td= LogicHelper.calculateState(_chara.SPEC.LDA, lv) + maxDfm.LDA
                  tr
                    th QTH:
                    td= LogicHelper.calculateState(_chara.SPEC.QTH, lv) + maxDfm.QTH
                  tr
                    th DDG:
                    td= LogicHelper.calculateState(_chara.SPEC.DDG, lv) + maxDfm.DDG
                  tr
                    th SADD:
                    td= LogicHelper.calculateState(_chara.SPEC.SADD, lv) + maxDfm.SADD

              - if (_chara.BA.length)
                h4 ----- ブレイズアーツ (BA) -----
                - for (const ba of _chara.BA)
                  - const thatBa = blazeArt.m_vList.find(b => b.DF === ba.DF);
                  - for (const [lv, _ba] of thatBa.LV.entries())
                    - const s = skill.m_vList.find(s => s.id === _ba.SKILL_DF);
                    - if (!s)
                      p skill not found: DF=#{_ba.SKILL_DF}
                    - else
                      h4 ----- LV #{ba.LV} / BA LV #{lv + 1}  -----
                      table
                        tr
                          th 名前:
                          td= s.name
                        tr
                          th 詳細:
                          td= s.detail
                        tr
                          th 数値:
                          td= `${s.effectValue}, ${s.effectValue2}`

              h4 -------- 食事 --------
              - for (const fdm of _chara.FDM)
                h5 ----- LV #{fdm.NO} -----
                - for (const fd of fdm.FD)
                  div(style="width: 20%")
                    - const food = item.m_vList.find(i => i.DF === fd.DF)
                      a(href="./item.html#DF-" + fd.DF style="display: flex; align-items: center; flex-basis: auto")
                        span 品質 #{fd.QTY}
                        img(src="./img/icon_s/Texture2D/icon_item_s_" + food.DF + ".png" alt= food.NAME style="width: 60px")
                table
                  tr
                    td HP
                    td= fdm.HP
                  tr
                    td 物理攻撃 SATK:
                    td= fdm.SATK
                  tr
                    td 物理防禦 SDEF:
                    td= fdm.SDEF
                  tr
                    td 魔法攻撃 MATK:
                    td= fdm.MATK
                  tr
                    td 魔法防禦 MDEF:
                    td= fdm.MDEF
                  tr
                    td 速度 SPD:
                    td= fdm.SPD
                  tr
                    td SDA:
                    td= fdm.SDA
                  tr
                    td LDA:
                    td= fdm.LDA
                  tr
                    td QTH:
                    td= fdm.QTH
                  tr
                    td DDG:
                    td= fdm.DDG
                  tr
                    td SADD:
                    td= fdm.SADD

              h4 -------- クェスト --------
              - for (const qst of _chara.QST)
                h5 ----- LV #{qst.LV} -----
                - const q = quest.m_vList.find(i => i.DF === qst.QUEST_DF)
                p= q ? q.NAME : "-"
