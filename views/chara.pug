doctype html
html
  head
    title #{that.i18nService.i18n.__("キャラクター")}
    link(rel="stylesheet" href= that.exportService.rootFolderRelativePath + "css/reset.css")
    link(rel="stylesheet" href= that.exportService.rootFolderRelativePath + "css/main.css")
    link(rel="stylesheet" href= that.exportService.rootFolderRelativePath + "css/wealth.css")

    //- scroll top button for mobile
    script(src="https://code.jquery.com/jquery-3.5.1.min.js" integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=" crossorigin="anonymous")
    script(src="https://cdnjs.cloudflare.com/ajax/libs/material-scrolltop/1.0.2/material-scrolltop.min.js" integrity="sha512-U5XMCa20kp0+xaI+DDNcEjTrwecJ5jkWGUB9Ye4cRkGWgfQ03dnXu+eFr7BtjyjPSBCBngip9MlTgHjuSrxXAA==" crossorigin="anonymous")
    link(rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/material-scrolltop/1.0.2/material-scrolltop.min.css" integrity="sha512-V5Tr6yGfJc51zNqUUn+CydMuxKdQBf52F6EX89kityPpmSBduIBl39xsmcoKcmlLds+O8l+qN6FtgSjBSIMspA==" crossorigin="anonymous")
    script(src="https://cdnjs.cloudflare.com/ajax/libs/mobile-detect/1.4.4/mobile-detect.min.js" integrity="sha512-hSVyGuXBHmZy+A+P21DRUAuc7UTfcqc0geieb/H1ZmqiJAoDTfzFYIOBAMTcFUWU/PwLPEoREYG/77ckPB6oSw==" crossorigin="anonymous")
    script(src= that.exportService.rootFolderRelativePath + "js/scrollTopButton.js")

    style.
      th {
        white-space: nowrap;
      }
      th, td {
        text-align: left;
        padding: 4px;
      }

      .items-index-container {
        display: flex;
        flex-wrap: wrap;
      }
      .item-index-container {
        padding: 12px;
      }
      .item-index-container a {
        width: 120px;
        min-height: 140px;
        display: flex;
        flex-direction: column;
        padding-left: 4px;
        text-align: center;
      }
      .item-index-container > a > p {
        white-space: nowrap;
        text-overflow: ellipsis;
        overflow: hidden;
      }
      .item-index-container > a > img {
        width: 100%;
      }


      .item-container {
        display: flex;
        padding: 12px;
      }
      .item-container-left {
        min-width: 200px;
        max-width: 200px;
        padding: 12px;
      }
      .item-container-right {
        padding: 12px;
      }


      .chara-levels {
        display: flex;
        flex-wrap: wrap;
      }


      .chara-food-items {
        display: flex;
        flex-wrap: wrap;
      }
      .chara-food-consume {
        display: flex;
        align-items: center;
        flex-basis: auto;
      }
  body
    h3 #{that.i18nService.i18n.__("キャラクター")}
    div.items-index-container
      - for (const _chara of chara.m_vList.filter(p => p.SKILL.length))
        div.item-index-container
          a(href="#DF-" + _chara.DF)
            p #{_chara.NAME}
            img(src= that.exportService.rootFolderRelativePath + "img/chara/Texture2D/icon_chara_all_" + _chara.DF.toString().padStart(4, "0") + "_00.png" alt= _chara.NAME)
    br
    br
    br
    br


    div
      - for(const _chara of chara.m_vList.filter(p => p.SKILL.length))
        div.item-container(id="DF-" + _chara.DF)
          div.item-container-left
            h3.item-name= _chara.NAME
            - for (const id of Array(10).keys())
              - const iconFilename = `icon_chara_all_${_chara.DF.toString().padStart(4, "0")}_${id.toString().padStart(2, "0")}.png`
              - if (charaIcons.includes(iconFilename))
                img.icon-full(src= that.exportService.rootFolderRelativePath + "img/chara/Texture2D/" + iconFilename alt= _chara.NAME)
            p= _chara.DESC
            br
            p DF: #{_chara.DF}
            p #{that.i18nService.i18n.__("職業")}: #{that.lookup.eJobKind[_chara.BTST] || _chara.BTST}
            p #{that.i18nService.i18n.__("性別")}: 
              - if (!_chara.GEN)
                span ♂ ♀
              - else if (_chara.GEN === 1)
                span ♂ 
              - else if (_chara.GEN === 2)
                span ♀ 

            - if (_chara.WEAPON.length)
              p #{that.i18nService.i18n.__("武器種類")}: #{_chara.WEAPON.map(p => that.lookup.weaponGen[p.GEN] || p.GEN).join(", ")}
            - for (const grow of _chara.GROW)
              p.wealth-container
                img(src= that.exportService.rootFolderRelativePath + "img/icon_item01/Texture2D/icon_item01_00006.png" alt= that.i18nService.i18n.__("限界キャンディ"))
                span #{grow.STONE}
                span #{new Array(grow.STAR).fill('⭐').join('')}
          div.item-container-right
            - const characterOnlyItems = item.m_vList.filter(p => p.GROUP_DF === _chara.GROUP_DF);
            - if (characterOnlyItems.length)
              h4 ----- #{that.i18nService.i18n.__("専用アイテム")} -----
              - for (const _item of characterOnlyItems)
                a(href="item.html#DF-" + _item.DF target="_blank")
                  img.icon-small(src= that.exportService.rootFolderRelativePath + "img/icon_s/Texture2D/icon_item_s_" + _item.DF + ".png" alt= _item.NAME)

            h4 ----- #{that.i18nService.i18n.__("スキル")} -----
            - for (const [lv, skills] of Enumerable.from(_chara.SKILL).groupBy(p => p.LV).orderBy(p => p.key()).select(p => [p.key(), p.toArray()]).toArray())
              h4 --- LV #{lv} ---
              - for (const [i, _s] of skills.entries())
                - const _skill = skill.m_vList.find(s => s.id === _s.DF)
                - if (_skill)
                  table
                    tr
                      th #{that.i18nService.i18n.__("名前")}
                      td= _skill.name
                    tr
                      th #{that.i18nService.i18n.__("詳細")}
                      td= _skill.detail
                    tr
                      th #{that.i18nService.i18n.__("数値")}
                      td= `${_skill.effectValue}, ${_skill.effectValue2}`
                    - if (_skill.stateOwn.length)
                      tr
                        th #{that.i18nService.i18n.__('追加状態 (自)')}
                        td
                          - for (const _state of _skill.stateOwn)
                            - const _abnormalState = abnormalState.m_vList.find(p => p.id === _state.id)
                            p #{(_state.rate * 100).toFixed()}% #{_abnormalState.name} #{_abnormalState.turn}#{that.i18nService.i18n.__('ターン')}
                    - if (_skill.state.length)
                      tr
                        th #{that.i18nService.i18n.__('追加状態')}
                        td
                          - for (const _state of _skill.state)
                            - const _abnormalState = abnormalState.m_vList.find(p => p.id === _state.id)
                            p #{(_state.rate * 100).toFixed()}% #{_abnormalState.name} #{_abnormalState.turn}#{that.i18nService.i18n.__('ターン')}
                  - if (skills.length !== (i + 1))
                    p &#x3E;

            - if (_chara.BA.length)
              h4 ----- #{that.i18nService.i18n.__("ブレイズアーツ")} (BA) -----
              - for (const ba of _chara.BA)
                - const thatBa = blazeArt.m_vList.find(b => b.DF === ba.DF);
                - for (const [lv, _ba] of thatBa.LV.entries())
                  - const _skill = skill.m_vList.find(s => s.id === _ba.SKILL_DF);
                  - if (_skill)
                    h4 --- LV #{ba.LV} / BA LV #{lv + 1}  ---
                    table
                      tr
                        th #{that.i18nService.i18n.__("名前")}
                        td= _skill.name
                      tr
                        th #{that.i18nService.i18n.__("詳細")}
                        td= _skill.detail
                      tr
                        th #{that.i18nService.i18n.__("数値")}
                        td= `${_skill.effectValue}, ${_skill.effectValue2}`
                      - if (_skill.type === 1)
                        - const attackSkill = _skill.combSkillList.find(p => p.effect === 1) || _skill
                        tr
                          th #{that.i18nService.i18n.__("属性")}
                          td #{that.lookup.eBattleElementKind[attackSkill.element]}
                        tr
                          th #{that.i18nService.i18n.__("對象")}
                          td #{that.lookup.targetTeam[attackSkill.targetTeam]}#{that.lookup.fieldItemRange[attackSkill.targetScope]}
                        - if (attackSkill.stateOwn.length)
                          tr
                            th #{that.i18nService.i18n.__('追加状態 (自)')}
                            td
                              - for (const _state of attackSkill.stateOwn)
                                - const _abnormalState = abnormalState.m_vList.find(p => p.id === _state.id)
                                p #{(_state.rate * 100).toFixed()}% #{_abnormalState.name} #{_abnormalState.turn}#{that.i18nService.i18n.__('ターン')}
                        - if (attackSkill.state.length)
                          tr
                            th #{that.i18nService.i18n.__('追加状態')}
                            td
                              - for (const _state of attackSkill.state)
                                - const _abnormalState = abnormalState.m_vList.find(p => p.id === _state.id)
                                p #{(_state.rate * 100).toFixed()}% #{_abnormalState.name} #{_abnormalState.turn}#{that.i18nService.i18n.__('ターン')}

            div.chara-levels
              - for (const lv of [1, 60, 80])
                div
                  h4 ----- LV #{lv} -----
                  table
                    tr
                      th HP
                      td= that.logicService.state(_chara.SPEC.HP, lv)
                    tr
                      th= that.lookup.state.SATK
                      td= that.logicService.state(_chara.SPEC.SATK, lv)
                    tr
                      th= that.lookup.state.SDEF
                      td= that.logicService.state(_chara.SPEC.SDEF, lv)
                    tr
                      th= that.lookup.state.MATK
                      td= that.logicService.state(_chara.SPEC.MATK, lv)
                    tr
                      th= that.lookup.state.MDEF
                      td= that.logicService.state(_chara.SPEC.MDEF, lv)
                    tr
                      th= that.lookup.state.SPD
                      td= that.logicService.state(_chara.SPEC.SPD, lv)
                    tr
                      th= that.lookup.state.SDA
                      td= that.logicService.state(_chara.SPEC.SDA, lv)
                    tr
                      th= that.lookup.state.LDA
                      td= that.logicService.state(_chara.SPEC.LDA, lv)
                    tr
                      th= that.lookup.state.QTH
                      td= that.logicService.state(_chara.SPEC.QTH, lv)
                    tr
                      th= that.lookup.state.DDG
                      td= that.logicService.state(_chara.SPEC.DDG, lv)
                    tr
                      th= that.lookup.state.SADD
                      td= that.logicService.state(_chara.SPEC.SADD, lv)

              div
                - const lv = 80
                - const maxDfm = _chara.FDM[_chara.FDM.length - 1];
                h4 ----- LV #{lv} #{that.i18nService.i18n.__("完食")} -----
                table
                  tr
                    th HP
                    td= that.logicService.state(_chara.SPEC.HP, lv) + maxDfm.HP
                  tr
                    th= that.lookup.state.SATK
                    td= that.logicService.state(_chara.SPEC.SATK, lv) + maxDfm.SATK
                  tr
                    th= that.lookup.state.SDEF
                    td= that.logicService.state(_chara.SPEC.SDEF, lv) + maxDfm.SDEF
                  tr
                    th= that.lookup.state.MATK
                    td= that.logicService.state(_chara.SPEC.MATK, lv) + maxDfm.MATK
                  tr
                    th= that.lookup.state.MDEF
                    td= that.logicService.state(_chara.SPEC.MDEF, lv) + maxDfm.MDEF
                  tr
                    th= that.lookup.state.SPD
                    td= that.logicService.state(_chara.SPEC.SPD, lv) + maxDfm.SPD
                  tr
                    th= that.lookup.state.SDA
                    td= that.logicService.state(_chara.SPEC.SDA, lv) + maxDfm.SDA
                  tr
                    th= that.lookup.state.LDA
                    td= that.logicService.state(_chara.SPEC.LDA, lv) + maxDfm.LDA
                  tr
                    th= that.lookup.state.QTH
                    td= that.logicService.state(_chara.SPEC.QTH, lv) + maxDfm.QTH
                  tr
                    th= that.lookup.state.DDG
                    td= that.logicService.state(_chara.SPEC.DDG, lv) + maxDfm.DDG
                  tr
                    th= that.lookup.state.SADD
                    td= that.logicService.state(_chara.SPEC.SADD, lv) + maxDfm.SADD

            h4 ----- #{that.i18nService.i18n.__("食事")} -----
            div.chara-food-items 
              - for (const fdm of _chara.FDM)
                div
                  h5 --- LV #{fdm.NO} ---
                  - for (const fd of fdm.FD)
                    div
                      - const _item = item.m_vList.find(i => i.DF === fd.DF)
                      - const href = _item.RSP.length ? `${that.exportService.rootFolderRelativePath}composeItem.html?locale=${that.i18nService.i18n.getLocale()}&df=${_item.DF}&quality=${fd.QTY}` : `item.html#DF-${_item.DF}`;
                      a.chara-food-consume(href= href target="_blank")
                        span(style="whitespace: nowrap") #{that.i18nService.i18n.__("品質")} #{fd.QTY}
                        img.icon-small(src= that.exportService.rootFolderRelativePath + "img/icon_s/Texture2D/icon_item_s_" + _item.DF + ".png" alt= _item.NAME)
                  table
                    tr
                      td HP
                      td= fdm.HP
                    tr
                      td= that.lookup.state.SATK
                      td= fdm.SATK
                    tr
                      td= that.lookup.state.SDEF
                      td= fdm.SDEF
                    tr
                      td= that.lookup.state.MATK
                      td= fdm.MATK
                    tr
                      td= that.lookup.state.MDEF
                      td= fdm.MDEF
                    tr
                      td= that.lookup.state.SPD
                      td= fdm.SPD
                    tr
                      td= that.lookup.state.SDA
                      td= fdm.SDA
                    tr
                      td= that.lookup.state.LDA
                      td= fdm.LDA
                    tr
                      td= that.lookup.state.QTH
                      td= fdm.QTH
                    tr
                      td= that.lookup.state.DDG
                      td= fdm.DDG
                    tr
                      td= that.lookup.state.SADD
                      td= fdm.SADD

            h4 ----- #{that.i18nService.i18n.__("クェスト")} -----
            - for (const qst of _chara.QST)
              - const q = quest.m_vList.find(i => i.DF === qst.QUEST_DF)
              - if (q)
                h5 --- LV #{qst.LV} ---
                a(href="quest.html#DF-" + qst.QUEST_DF target="_blank")= q.NAME
        hr
