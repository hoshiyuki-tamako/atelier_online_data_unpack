doctype html
html
  head
    title キャラクター
    link(rel="stylesheet" href= exportFileManager.rootFolderRelativePath + "css/reset.css")
    link(rel="stylesheet" href= exportFileManager.rootFolderRelativePath + "css/main.css")
    link(rel="stylesheet" href= exportFileManager.rootFolderRelativePath + "css/wealth.css")
    style.
      th {
        white-space: nowrap;
      }
      th, td {
        text-align: left;
        padding: 4px;
      }

      .items-index-container {
        display: flex;
        flex-wrap: wrap;
      }
      .item-index-container {
        padding: 12px;
      }
      .item-index-container a {
        width: 120px;
        min-height: 140px;
        display: flex;
        flex-direction: column;
        padding-left: 4px;
        text-align: center;
      }
      .item-index-container > a > p {
        white-space: nowrap;
        text-overflow: ellipsis;
        overflow: hidden;
      }
      .item-index-container > a > img {
        width: 100%;
      }


      .item-container {
        display: flex;
        padding: 12px;
      }
      .item-container-left {
        min-width: 200px;
        max-width: 200px;
        padding: 12px;
      }
      .item-container-right {
        padding: 12px;
      }



      .chara-food-item-container {
        width: 20%
      }
      .chara-food-consume {
        display: flex;
        align-items: center;
        flex-basis: auto;
      }
  body
    h3 キャラクター
    div.items-index-container
      - for (const _chara of chara.m_vList.filter(p => p.SKILL.length))
        div.item-index-container
          a(href="#DF-" + _chara.DF)
            p #{_chara.NAME}
            img(src= exportFileManager.rootFolderRelativePath + "img/chara/Texture2D/icon_chara_all_" + _chara.DF.toString().padStart(4, "0") + "_00.png" alt= _chara.NAME)
    br
    br
    br
    br


    div
      - for(const _chara of chara.m_vList.filter(p => p.SKILL.length))
        div.item-container(id="DF-" + _chara.DF)
          div.item-container-left
            h3.item-name= _chara.NAME
            - for (const id of [...Array(10).keys()])
              - const iconFilename = `icon_chara_all_${_chara.DF.toString().padStart(4, "0")}_${id.toString().padStart(2, "0")}.png`
              - if (charaIcons.includes(iconFilename))
                img.icon-full(src= exportFileManager.rootFolderRelativePath + "img/chara/Texture2D/" + iconFilename alt= _chara.NAME)
            p= _chara.DESC
            br
            p DF: #{_chara.DF}
            p 性別: 
              - if (!_chara.GEN)
                span ♂ ♀
              - else if (_chara.GEN === 1)
                span ♂ 
              - else if (_chara.GEN === 2)
                span ♀ 

            - if (_chara.WEAPON.length)
              p 武器種類: #{_chara.WEAPON.map(p => Lookup.weaponGen[p.GEN] || p.GEN).join(", ")}
            - for (const grow of _chara.GROW)
              p.wealth-container
                img(src= exportFileManager.rootFolderRelativePath + "img/icon_item01/Texture2D/icon_item01_00006.png" alt="限界キャンディ")
                span #{grow.STONE}
                span #{new Array(grow.STAR).fill('⭐').join('')}
          div.item-container-right
            - const characterOnlyItems = item.m_vList.filter(p => p.GROUP_DF === _chara.GROUP_DF);
            - if (characterOnlyItems.length)
              h4 ----- 専用アイテム -----
              - for (const _item of characterOnlyItems)
                a(href="item.html#DF-" + _item.DF target="_blank")
                  img.icon-small(src= exportFileManager.rootFolderRelativePath + "img/icon_s/Texture2D/icon_item_s_" + _item.DF + ".png" alt= _item.NAME)

            h4 ----- スキル -----
            - for (const [lv, skills] of Enumerable.from(_chara.SKILL).groupBy(p => p.LV).orderBy(p => p.key()).select(p => [p.key(), p.toArray()]).toArray())
              h4 --- LV #{lv} ---
              - for (const [i, _s] of skills.entries())
                - const _skill = skill.m_vList.find(s => s.id === _s.DF)
                - if (!_skill)
                  - if (_s.DF)
                    p skill not found: DF=#{_s.DF}
                  - else
                    p -
                - else
                  table
                    tr
                      th 名前
                      td= _skill.name
                    tr
                      th 詳細
                      td= _skill.detail
                    tr
                      th 数値
                      td= `${_skill.effectValue}, ${_skill.effectValue2}`
                - if (skills.length !== (i + 1))
                  p &#x3E;


            - for (const lv of [1, 60, 80])
              h4 ----- LV #{lv} -----
              table
                tr
                  th HP
                  td= LogicHelper.calculateState(_chara.SPEC.HP, lv)
                tr
                  th= Lookup.state.SATK
                  td= LogicHelper.calculateState(_chara.SPEC.SATK, lv)
                tr
                  th= Lookup.state.SDEF
                  td= LogicHelper.calculateState(_chara.SPEC.SDEF, lv)
                tr
                  th= Lookup.state.MATK
                  td= LogicHelper.calculateState(_chara.SPEC.MATK, lv)
                tr
                  th= Lookup.state.MDEF
                  td= LogicHelper.calculateState(_chara.SPEC.MDEF, lv)
                tr
                  th= Lookup.state.SPD
                  td= LogicHelper.calculateState(_chara.SPEC.SPD, lv)
                tr
                  th= Lookup.state.SDA
                  td= LogicHelper.calculateState(_chara.SPEC.SDA, lv)
                tr
                  th= Lookup.state.LDA
                  td= LogicHelper.calculateState(_chara.SPEC.LDA, lv)
                tr
                  th= Lookup.state.QTH
                  td= LogicHelper.calculateState(_chara.SPEC.QTH, lv)
                tr
                  th= Lookup.state.DDG
                  td= LogicHelper.calculateState(_chara.SPEC.DDG, lv)
                tr
                  th= Lookup.state.SADD
                  td= LogicHelper.calculateState(_chara.SPEC.SADD, lv)

            - const lv = 80
            - const maxDfm = _chara.FDM[_chara.FDM.length - 1];
            h4 ----- LV #{lv} 完食 -----
            table
              tr
                th HP
                td= LogicHelper.calculateState(_chara.SPEC.HP, lv) + maxDfm.HP
              tr
                th= Lookup.state.SATK
                td= LogicHelper.calculateState(_chara.SPEC.SATK, lv) + maxDfm.SATK
              tr
                th= Lookup.state.SDEF
                td= LogicHelper.calculateState(_chara.SPEC.SDEF, lv) + maxDfm.SDEF
              tr
                th= Lookup.state.MATK
                td= LogicHelper.calculateState(_chara.SPEC.MATK, lv) + maxDfm.MATK
              tr
                th= Lookup.state.MDEF
                td= LogicHelper.calculateState(_chara.SPEC.MDEF, lv) + maxDfm.MDEF
              tr
                th= Lookup.state.SPD
                td= LogicHelper.calculateState(_chara.SPEC.SPD, lv) + maxDfm.SPD
              tr
                th= Lookup.state.SDA
                td= LogicHelper.calculateState(_chara.SPEC.SDA, lv) + maxDfm.SDA
              tr
                th= Lookup.state.LDA
                td= LogicHelper.calculateState(_chara.SPEC.LDA, lv) + maxDfm.LDA
              tr
                th= Lookup.state.QTH
                td= LogicHelper.calculateState(_chara.SPEC.QTH, lv) + maxDfm.QTH
              tr
                th= Lookup.state.DDG
                td= LogicHelper.calculateState(_chara.SPEC.DDG, lv) + maxDfm.DDG
              tr
                th= Lookup.state.SADD
                td= LogicHelper.calculateState(_chara.SPEC.SADD, lv) + maxDfm.SADD

            - if (_chara.BA.length)
              h4 ----- ブレイズアーツ (BA) -----
              - for (const ba of _chara.BA)
                - const thatBa = blazeArt.m_vList.find(b => b.DF === ba.DF);
                - for (const [lv, _ba] of thatBa.LV.entries())
                  - const s = skill.m_vList.find(s => s.id === _ba.SKILL_DF);
                  - if (!s)
                    - if (s.DF)
                      p skill not found: DF=#{s.DF}
                    - else
                      p -
                  - else
                    h4 --- LV #{ba.LV} / BA LV #{lv + 1}  ---
                    table
                      tr
                        th 名前
                        td= s.name
                      tr
                        th 詳細
                        td= s.detail
                      tr
                        th 数値
                        td= `${s.effectValue}, ${s.effectValue2}`

            h4 ----- 食事 -----
            - for (const fdm of _chara.FDM)
              h5 --- LV #{fdm.NO} ---
              - for (const fd of fdm.FD)
                div.chara-food-item-container
                  - const _item = item.m_vList.find(i => i.DF === fd.DF)
                  - const href = _item.RSP.length ? `composeItem.html?df=${_item.DF}&quality=${fd.QTY}` : `item.html#DF-${_item.DF}`;
                  a.chara-food-consume(href= href target="_blank")
                    span 品質 #{fd.QTY}
                    img.icon-small(src= exportFileManager.rootFolderRelativePath + "img/icon_s/Texture2D/icon_item_s_" + _item.DF + ".png" alt= _item.NAME)
              table
                tr
                  td HP
                  td= fdm.HP
                tr
                  td= Lookup.state.SATK
                  td= fdm.SATK
                tr
                  td= Lookup.state.SDEF
                  td= fdm.SDEF
                tr
                  td= Lookup.state.MATK
                  td= fdm.MATK
                tr
                  td= Lookup.state.MDEF
                  td= fdm.MDEF
                tr
                  td= Lookup.state.SPD
                  td= fdm.SPD
                tr
                  td= Lookup.state.SDA
                  td= fdm.SDA
                tr
                  td= Lookup.state.LDA
                  td= fdm.LDA
                tr
                  td= Lookup.state.QTH
                  td= fdm.QTH
                tr
                  td= Lookup.state.DDG
                  td= fdm.DDG
                tr
                  td= Lookup.state.SADD
                  td= fdm.SADD

            h4 ----- クェスト -----
            - for (const qst of _chara.QST)
              - const q = quest.m_vList.find(i => i.DF === qst.QUEST_DF)
              - if (q)
                h5 --- LV #{qst.LV} ---
                a(href="quest.html#DF-" + qst.QUEST_DF target="_blank")= q.NAME
        hr