doctype html
html
  head
    title #{that.i18nService.i18n.__("敵")}
    link(rel="stylesheet" href= that.exportService.rootFolderRelativePath + "css/reset.css")
    link(rel="stylesheet" href= that.exportService.rootFolderRelativePath + "css/main.css")
    link(rel="stylesheet" href= that.exportService.rootFolderRelativePath + "css/wealth.css")

    //- scroll top button for mobile
    script(src="https://code.jquery.com/jquery-3.5.1.min.js" integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=" crossorigin="anonymous")
    script(src="https://cdnjs.cloudflare.com/ajax/libs/material-scrolltop/1.0.2/material-scrolltop.min.js" integrity="sha512-U5XMCa20kp0+xaI+DDNcEjTrwecJ5jkWGUB9Ye4cRkGWgfQ03dnXu+eFr7BtjyjPSBCBngip9MlTgHjuSrxXAA==" crossorigin="anonymous")
    link(rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/material-scrolltop/1.0.2/material-scrolltop.min.css" integrity="sha512-V5Tr6yGfJc51zNqUUn+CydMuxKdQBf52F6EX89kityPpmSBduIBl39xsmcoKcmlLds+O8l+qN6FtgSjBSIMspA==" crossorigin="anonymous")
    script(src="https://cdnjs.cloudflare.com/ajax/libs/mobile-detect/1.4.4/mobile-detect.min.js" integrity="sha512-hSVyGuXBHmZy+A+P21DRUAuc7UTfcqc0geieb/H1ZmqiJAoDTfzFYIOBAMTcFUWU/PwLPEoREYG/77ckPB6oSw==" crossorigin="anonymous")
    script(src= that.exportService.rootFolderRelativePath + "js/scrollTopButton.js")

    style.
      th {
        white-space: nowrap;
      }
      th, td {
        text-align: left;
      }
      th, td {
        padding: 4px;
      }


      .category-indexes-container {
        display: flex;
        flex-wrap: wrap;
      }
      .category-index-container {
        padding: 12px;
      }




      .items-index-container {
        display: flex;
        flex-wrap: wrap;
      }
      .item-index-container {
        padding: 12px;
      }
      .item-index-container a {
        width: 120px;
        min-height: 140px;
        display: flex;
        flex-direction: column;
        padding-left: 4px;
        text-align: center;
      }
      .item-index-container > a > p {
        white-space: nowrap;
        text-overflow: ellipsis;
        overflow: hidden;
      }
      .item-index-container > a > img {
        width: 100%;
      }

      .item-container {
        display: flex;
        padding: 12px;
      }
      .item-container-left {
        min-width: 200px;
        max-width: 200px;
        padding: 12px;
      }
      .item-container-right {
        padding: 12px;
      }

      .levels {
        display: flex;
        flex-wrap: wrap;
      }
  body
    div
      h2 #{that.i18nService.i18n.__("種類")}
      div.category-indexes-container
        - for(const kind of enemy.KindList)
          div.category-index-container
            a(href="#iKind-" + kind.iKind)
              h3= kind.strName
    br
    br
    br
    br

    div
      - for(const [eKind, _enemies] of Enumerable.from(enemy.m_vList).groupBy(p => p.eKind).orderBy(p => p.key()).select(p => [p.key(), p.toArray()]).toArray())
        - const strName = enemy.KindList.find(i => i.iKind === eKind).strName
        h2(id="iKind-" + eKind)= strName
        div.items-index-container
          - for (const _enemy of _enemies)
            div.item-index-container
              a(href="#DF-" + _enemy.DF)
                p= _enemy.strName
                img(src= that.exportService.rootFolderRelativePath + "img/enemy/Texture2D/" + `enemy_tex_${_enemy.sParam.MDL}.png` alt= _enemy.strName)
      br
      br
    br
    br


    div
      - for(const _enemy of enemy.m_vList)
        div.item-container(id="DF-" + _enemy.DF)
          div.item-container-left
            h3.item-name= _enemy.strName
            img.icon-full(src= that.exportService.rootFolderRelativePath + "img/enemy/Texture2D/" + `enemy_tex_${_enemy.sParam.MDL}.png` alt= _enemy.strName)
            p= _enemy.strDesc
            br
            p DF: #{_enemy.DF}
            p #{that.i18nService.i18n.__("短い名前")}: #{_enemy.AnotherName}
            p #{that.i18nService.i18n.__("種族")}: #{enemy.KindList.find(i => i.iKind === _enemy.eKind).strName}
            p #{that.i18nService.i18n.__("攻撃目標")}: #{that.lookup.enemyEAttackTargetKind[_enemy.eAttackTargetKind]}
            p #{that.i18nService.i18n.__("ボス")}: #{_enemy.bBoss ? "✓" : "x"}
            p #{that.i18nService.i18n.__("オンラインオーンリー")}: #{_enemy.bOnlyOnline ? "✓" : "x"}
            p #{that.i18nService.i18n.__("大きさ")}: #{that.lookup.enemySize[_enemy.eSize] || _enemy.eSize}
            p #{that.i18nService.i18n.__("視角")}: #{Math.round(Math.acos(_enemy.fViewCos) * (180/Math.PI), 2)}°
            p #{that.i18nService.i18n.__("移動速度")}: #{_enemy.fMoveSpeed}
            p #{that.i18nService.i18n.__("打撃範囲")}: #{_enemy.fHitRadius}

          div.item-container-right
            - const appearAreas = getAreaIds(_enemy).map(areaId => areaInfo.List.find(p => p.iAreaId === areaId)).filter(p => p);
            - if (appearAreas.length)
              h4 ----- #{that.i18nService.i18n.__("出現エリア")} -----
              - for (const area of appearAreas)
                - const _fieldName = fieldName.List.find(p => p.iAreaNameId === area.iAreaNameId);
                p
                  a(href="area.html#iAreaID-" + area.iAreaId target="_blank")= _fieldName.strAreaName
            br
            - if (_enemy.sParam.SKILL.length)
              h4 ----- #{that.i18nService.i18n.__("スキル")}/#{that.i18nService.i18n.__("効果")} -----
              - for (const [i, _s] of _enemy.sParam.SKILL.entries())
                - const _skill = skill.m_vList.find(s => s.id === _s.DF);
                - if (_skill)
                  table
                    tr
                      th #{that.i18nService.i18n.__("名前")}
                      td= _skill.name
                    tr
                      th #{that.i18nService.i18n.__("詳細")}
                      td= _skill.detail
                    tr
                      th #{that.i18nService.i18n.__("数値")}
                      td= `${_skill.effectValue}, ${_skill.effectValue2}`
                    - if (_skill.type === 1)
                      - const attackSkill = _skill.combSkillList.find(p => p.effect === 1) || _skill
                      tr
                        th #{that.i18nService.i18n.__("属性")}
                        td #{that.lookup.eBattleElementKind[attackSkill.element]}
                      tr
                        th #{that.i18nService.i18n.__("對象")}
                        td #{that.lookup.targetTeam[attackSkill.targetTeam]}#{that.lookup.fieldItemRange[attackSkill.targetScope]}
                      - if (attackSkill.stateOwn.length)
                        tr
                          th #{that.i18nService.i18n.__('追加状態 (自)')}
                          td
                            - for (const _state of attackSkill.stateOwn)
                              - const _abnormalState = abnormalState.m_vList.find(p => p.id === _state.id)
                              p #{(_state.rate * 100).toFixed()}% #{_abnormalState.name} #{_abnormalState.turn}#{that.i18nService.i18n.__('ターン')}
                      - if (attackSkill.state.length)
                        tr
                          th #{that.i18nService.i18n.__('追加状態')}
                          td
                            - for (const _state of attackSkill.state)
                              - const _abnormalState = abnormalState.m_vList.find(p => p.id === _state.id)
                              p #{(_state.rate * 100).toFixed()}% #{_abnormalState.name} #{_abnormalState.turn}#{that.i18nService.i18n.__('ターン')}
                - if (_enemy.sParam.SKILL.length !== (i + 1))
                  p &#x3E;

            h4 ----- #{that.i18nService.i18n.__("属性")} -----
            table
              - for (const [element, value] of Object.entries(_enemy.sParam.ELM).filter(p => p[1]))
                tr
                  th= that.lookup.element[element] || element
                  td= value
            div.levels
              - for (const lv of [1, 60, 80, 120])
                div
                  h4 ----- LV #{lv} -----
                  table
                    tr
                      th= that.lookup.state.EXP
                      td= that.logicService.state(_enemy.sParam.SPEC.EXP, lv)
                    tr
                      th= that.lookup.state.HP
                      td= that.logicService.state(_enemy.sParam.SPEC.HP, lv)
                    tr
                      th= that.lookup.state.SATK
                      td= that.logicService.state(_enemy.sParam.SPEC.SATK, lv)
                    tr
                      th= that.lookup.state.SDEF
                      td= that.logicService.state(_enemy.sParam.SPEC.SDEF, lv)
                    tr
                      th= that.lookup.state.MATK
                      td= that.logicService.state(_enemy.sParam.SPEC.MATK, lv)
                    tr
                      th= that.lookup.state.MDEF
                      td= that.logicService.state(_enemy.sParam.SPEC.MDEF, lv)
                    tr
                      th= that.lookup.state.SPD
                      td= that.logicService.state(_enemy.sParam.SPEC.SPD, lv)
                    tr
                      th= that.lookup.state.SDA
                      td= that.logicService.state(_enemy.sParam.SPEC.SDA, lv)
                    tr
                      th= that.lookup.state.LDA
                      td= that.logicService.state(_enemy.sParam.SPEC.LDA, lv)
                    tr
                      th= that.lookup.state.QTH
                      td= that.logicService.state(_enemy.sParam.SPEC.QTH, lv)
                    tr
                      th= that.lookup.state.DDG
                      td= that.logicService.state(_enemy.sParam.SPEC.DDG, lv)
                    tr
                      th= that.lookup.state.SADD
                      td= that.logicService.state(_enemy.sParam.SPEC.SADD, lv)
        hr