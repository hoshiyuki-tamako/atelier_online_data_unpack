doctype html
html
  head
    title 敵
    link(rel="stylesheet" href="css/reset.css")
    link(rel="stylesheet" href="css/main.css")
    link(rel="stylesheet" href="css/wealth.css")
    style.
      th {
        white-space: nowrap;
      }
      th, td {
        text-align: left;
      }
      th, td {
        padding: 4px;
      }


      .category-indexes-container {
        display: flex;
        flex-wrap: wrap;
      }
      .category-index-container {
        padding: 12px;
      }




      .items-index-container {
        display: flex;
        flex-wrap: wrap;
      }
      .item-index-container {
        padding: 12px;
      }
      .item-index-container a {
        width: 120px;
        min-height: 140px;
        display: flex;
        flex-direction: column;
        padding-left: 4px;
        text-align: center;
      }
      .item-index-container > a > p {
        white-space: nowrap;
        text-overflow: ellipsis;
        overflow: hidden;
      }
      .item-index-container > a > img {
        width: 100%;
      }

      .item-container {
        display: flex;
        padding: 12px;
      }
      .item-container-left {
        min-width: 200px;
        max-width: 200px;
        padding: 12px;
      }
      .item-container-right {
        padding: 12px;
      }
  body
    div
      h2 種類
      div.category-indexes-container
        - for(const kind of enemy.KindList)
          div.category-index-container
            a(href="#iKind-" + kind.iKind)
              h3= kind.strName
    br
    br
    br
    br

    div
      - for(const [eKind, _enemies] of Enumerable.from(enemy.m_vList).groupBy(p => p.eKind).orderBy(p => p.key()).select(p => [p.key(), p.toArray()]).toArray())
        - const strName = enemy.KindList.find(i => i.iKind === eKind).strName
        h2(id="iKind-" + eKind)= strName
        div.items-index-container
          - for (const _enemy of _enemies)
            div.item-index-container
              a(href="#DF-" + _enemy.DF)
                p= _enemy.strName
                img(src="img/enemy/Texture2D/" + `enemy_tex_${_enemy.sParam.MDL}.png` alt= _enemy.strName)
      br
      br
    br
    br


    div
      - for(const _enemy of enemy.m_vList)
        div.item-container(id="DF-" + _enemy.DF)
          div.item-container-left
            h3.item-name= _enemy.strName
            img.icon-full(src="img/enemy/Texture2D/" + `enemy_tex_${_enemy.sParam.MDL}.png` alt= _enemy.strName)
            p= _enemy.strDesc
            br
            p DF: #{_enemy.DF}
            p 短い名前: #{_enemy.AnotherName}
            p 種族: #{enemy.KindList.find(i => i.iKind === _enemy.eKind).strName}
            p 攻撃目標: #{Lookup.enemyEAttackTargetKind[_enemy.eAttackTargetKind]}
            p ボス: #{_enemy.bBoss ? "✓" : "x"}
            p オンラインオーンリー: #{_enemy.bOnlyOnline ? "✓" : "x"}
            p 大きさ: #{Lookup.enemySize[_enemy.eSize] || _enemy.eSize}
            p 視角: #{Math.round(Math.acos(_enemy.fViewCos)* (180/Math.PI), 2)}°
            p 移動速度: #{_enemy.fMoveSpeed}
            p 打撃範囲: #{_enemy.fHitRadius}

          div.item-container-right
            - const appearAreas = getAreaIds(_enemy).map(areaId => areaInfo.List.find(p => p.iAreaId === areaId)).filter(p => p);
            - if (appearAreas.length)
              h4 ----- 出現エリア -----
              - for (const area of appearAreas)
                - const _fieldName = fieldName.List.find(p => p.iAreaNameId === area.iAreaNameId);
                p
                  a(href="area.html#iAreaID-" + area.iAreaId target="_blank")= _fieldName.strAreaName
            br
            h4 ----- 屬性 -----
            table
              - for (const [element, value] of Object.entries(_enemy.sParam.ELM).filter(p => p[1]))
                tr
                  th= Lookup.element[element] || element
                  td= value
            - if (_enemy.sParam.SKILL.length)
              h4 ----- スキル/効果 -----
              - for (const [i, _skill] of _enemy.sParam.SKILL.entries())
                - const s = skill.m_vList.find(s => s.id === _skill.DF);
                - if (!s)
                  p skill not found: DF=#{_skill.DF}
                - else
                  table
                    tr
                      th 名前
                      td= s.name
                    tr
                      th 詳細
                      td= s.detail
                    tr
                      th 数値
                      td= `${s.effectValue}, ${s.effectValue2}`
                  - if (_enemy.sParam.SKILL.length !== (i + 1))
                    p &#x3E;

            - for (const lv of [1, 60, 80, 120])
              h4 ----- LV #{lv} -----
              table
                tr
                  th= Lookup.state.EXP
                  td= LogicHelper.calculateState(_enemy.sParam.SPEC.EXP, lv)
                tr
                  th= Lookup.state.HP
                  td= LogicHelper.calculateState(_enemy.sParam.SPEC.HP, lv)
                tr
                  th= Lookup.state.SATK
                  td= LogicHelper.calculateState(_enemy.sParam.SPEC.SATK, lv)
                tr
                  th= Lookup.state.SDEF
                  td= LogicHelper.calculateState(_enemy.sParam.SPEC.SDEF, lv)
                tr
                  th= Lookup.state.MATK
                  td= LogicHelper.calculateState(_enemy.sParam.SPEC.MATK, lv)
                tr
                  th= Lookup.state.MDEF
                  td= LogicHelper.calculateState(_enemy.sParam.SPEC.MDEF, lv)
                tr
                  th= Lookup.state.SPD
                  td= LogicHelper.calculateState(_enemy.sParam.SPEC.SPD, lv)
                tr
                  th= Lookup.state.SDA
                  td= LogicHelper.calculateState(_enemy.sParam.SPEC.SDA, lv)
                tr
                  th= Lookup.state.LDA
                  td= LogicHelper.calculateState(_enemy.sParam.SPEC.LDA, lv)
                tr
                  th= Lookup.state.QTH
                  td= LogicHelper.calculateState(_enemy.sParam.SPEC.QTH, lv)
                tr
                  th= Lookup.state.DDG
                  td= LogicHelper.calculateState(_enemy.sParam.SPEC.DDG, lv)
                tr
                  th= Lookup.state.SADD
                  td= LogicHelper.calculateState(_enemy.sParam.SPEC.SADD, lv)
        hr