doctype html
html
  head
    title スキル
    link(rel="stylesheet" href= exportFileManager.rootFolderRelativePath + "css/main.css")
    style.
      th {
        text-align: center;
        white-space: nowrap;
      }
      td {
        border-bottom: 1px solid black;
        text-align: center;
      }
      .example-cell {
        text-align: left;
        width: 20%;
      }
  body
    div
      table
        thead
          tr
            th ID
            th 名前
            th 詳細
            th 数値
            th 對象
            th 効果 (自)
            th 効果
            th 画像
            th アイテム/人物/敵
        tbody
          - for (const s of skill.m_vList.filter(p => p.type === 1))
            tr
              td.nowrap-cell= s.id
              td= s.name
              td= s.detail
              td.nowrap-cell= `${s.effectValue}, ${s.effectValue2}`
              td= Lookup.fieldItemRange[s.targetScope]
              td
                - for (const [i, _state] of s.stateOwn.entries())
                  - const effect = abnormalState.m_vList.find(p => p.id === _state.id)
                  p #{_state.rate * 100}% #{effect.name}
                  - if (s.stateOwn.length !== (i + 1))
                    p &#x3E;
              td
                - for (const [i, _state] of s.state.entries())
                  - const effect = abnormalState.m_vList.find(p => p.id === _state.id)
                  p #{_state.rate * 100}% #{effect.name}
                  - if (s.state.length !== (i + 1))
                    p &#x3E;
              td
                - if (s.iconPath)
                  img.icon-small(src= exportFileManager.rootFolderRelativePath + "img/icon_skill/Texture2D/" + `${s.iconPath}.png` alt= s.name)
              td.example-cell
                - for (const _item of itemsOrderByCategory.filter(p => p.SPC.some(i => i.SKILL.some(j => j.DF === s.id))))
                  a(href="item.html#DF-" + _item.DF target="_blank")
                    img.icon-small(src= exportFileManager.rootFolderRelativePath + "img/icon_s/Texture2D/icon_item_s_" + _item.DF + ".png" alt= _item.name)
                - for (const _enemy of enemiesOrderByCategory.filter(p => p.sParam.SKILL.some(i => i.DF === s.id)))
                  a(href="enemy.html#DF-" + _enemy.DF target="_blank")
                    img.icon-small(src= exportFileManager.rootFolderRelativePath + "img/enemy/Texture2D/" + `enemy_tex_${_enemy.sParam.MDL}.png` alt= _enemy.strName)
                - for (const _chara of charasOrderByCategory.filter(p => p.SKILL.some(i => i.DF === s.id) || p.BA.some(i => { const ba = blazeArt.m_vList.find(j => j.DF === i.DF); return ba ? ba.LV.some(k => k.SKILL_DF === s.id) : false })))
                  a(href="chara.html#DF-" + _chara.DF target="_blank")
                    img.icon-small(src= exportFileManager.rootFolderRelativePath + "img/chara/Texture2D/icon_chara_all_" + _chara.DF.toString().padStart(4, "0") + "_00.png" alt= _chara.NAME)
